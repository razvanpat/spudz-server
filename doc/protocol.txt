Protocol

<< - client to server
>> - server to client

*********** MEAN Stack ************

// Opening sequence
Connection will be made by MEAN stack and passed along to the game

<< Open game (connect la websocket)
>> "welcome"

<< Send credentials
		"credentials"
		- id:String
		- nickname:String
>> "player_registered"
// OR		
>> "error" {message: "Player already connected"}


//Matchmaking	
<< "find_match" 
		"find_match"

// if match found
//    firstPlayer: if true it's this players turn to move
>> "match_found" 
		{
			opponentId: xx,
			firstPlayer: true / false
		}

// if player is already in mm queue (normally this shuould not happen, but just in case)
>> "already_in_mm"

// if waiting for opponent to be found
>> "searching_match"


*********** Tournaments ************

create_tournament
tournament_already_started
tournament_sign_up
tournament_signed_up
tournament_ready
error : not signed up
match_found
waiting_for_opponent

*********** Game client ************


//Select characters		

<< "select character"
	{
		character_id: x
	}


>> "opponent_character"
	{
		character_id: x
	}

>> "start_match"


//P1 makes a move
<< "move"
		- action: ....
		- state {
				P1:{ 
					position: {x,y}
					health:z
				}
			}
			
//P2 responds to opponent move
// besides the move and param it will contain a property 'player', witht the player id making the move (useful for spectate & replay)
>> "move"
	....

// !!!!!!!!! TODO serverside !!!!!!!!
<< "reconciliation"
		- state {.....}


//P2 makes a move		
<< "move"
	....

		
//Win (player_id of the winner)
>> "win"
		- player_id:x


// opponent disconnected, you win
>> "opponent_disconnected"

// your move time has expired, it's your opponent's turn to move
>> "move_time_expired"

// you skip your round
<< "move_skip"

// your opponent skipped the round, it's your turn
>> "opponent_skip"

// your receive an error message from the server
>> "error"
	{
		message: "Lorem ipsum"
	}
