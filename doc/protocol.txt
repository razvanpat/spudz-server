Protocol

<< - client to server
>> - server to client

*********** MEAN Stack ************

// Opening sequence
Connection will be made by MEAN stack and passed along to the game

<< Open game (connect la websocket)
>> "welcome"

<< Send credentials
		"credentials"
		- id:String
		- nickname:String
>> "player_registered"
// OR		
>> "error" {message: "Player already connected"}


//Matchmaking	
<< "find_match" 
		"find_match"

// if match found
//    firstPlayer: if true it's this players turn to move
>> "match_found" 
		{
			opponentId: xx,
			firstPlayer: true / false
		}

// if player is already in mm queue (normally this shuould not happen, but just in case)
>> "already_in_mm"

// if waiting for opponent to be found
>> "searching_match"




*********** Tournaments ************

// set up a tournament (by admin connection)
<< configure_tournament
{
	startTime: timestamp (long, not used currently)
}

// player signs up for tournament
// available after configure_tournament until tournament_start
<< tournament_sign_up


// received when player has to skip this round
>> tournament_advance





*********** Game client ************

>> "match_found"
	{
		player_starts: boolean
	}

//Select characters		

<< "select character"
	{
		character_id: x
	}

>> "opponent_character"
	{
		character_id: x
	}

>> "start_match"


//make a move
<< "move"
		{
			destination: {x:, y:},
			attack: abilitate
			state 
			{
				player_pos: {x:, y:},
				opponent_pos: {x:, y:},
				player_health: int;
				opponent_health: int;
				player_energy: int;
				opponent_energy: int;
				player_cooldowns
				{
					ab1:
					ab2:
				}
				opponent_cooldowns
				{
					ab1:
					ab2:
				}
			}
		}
			
// receive opponents move from server
// besides the move and param it will contain a property 'player', witht the player id making the move (useful for spectate & replay)
>> {
			destination: {x:, y:},
			attack: abilitate
			state 
			{
				player_pos: {x:, y:},
				opponent_pos: {x:, y:},
				player_health: int;
				opponent_health: int;
				player_energy: int;
				opponent_energy: int;
				player_cooldowns
				{
					ab1:
					ab2:
				}
				opponent_cooldowns
				{
					ab1:
					ab2:
				}
			}
			player: player_id;
		}

// !!!!!!!!! TODO serverside !!!!!!!!
<< "reconciliation"
		- state {.....}

		
//Win 
>> "win"

//Lose 
>> "lose"

// opponent disconnected, you win
>> "opponent_disconnected"

// your move time has expired, it's your opponent's turn to move
>> "move_time_expired"

// you skip your round
<< "move_skip"

// your opponent skipped the round, it's your turn
>> "opponent_skip"

// your receive an error message from the server
>> "error"
	{
		message: "Lorem ipsum"
	}
